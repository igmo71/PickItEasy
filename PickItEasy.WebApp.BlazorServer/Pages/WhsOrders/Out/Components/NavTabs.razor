@using PickItEasy.Application.Dtos;
@using PickItEasy.Application.Services.WhsOrdersOut.Queries;

@inject SearchParameters SearchParameters

<ul class="nav nav-tabs mt-2">
    @*nav-fill*@
    @if (Statuses is not null)
    {
        <li class="nav-item">
            <button @onclick="(() => OnClickHandle(Guid.Empty))"
                    class="btn btn-link nav-link @(SearchParameters.StatusId == Guid.Empty ? "active" : string.Empty)">
                <h5>
                    <span>
                        Все
                    </span>
                    <span class="badge bg-secondary">
                        @(CountByStatus != null ? CountByStatus.Sum(c => c.Value) : 0)
                    </span>
                </h5>
            </button>
        </li>
        @foreach (var status in Statuses)
        {
            string active = status.Id == SearchParameters.StatusId ? "active" : string.Empty;
            <li class="nav-item">
                <button class="btn btn-link nav-link @active" @onclick="(() => OnClickHandle(status.Id))">
                    <h5>
                        <span>
                            @status.Synonym
                        </span>
                        <span class="badge bg-secondary">
                            @((CountByStatus != null && CountByStatus.ContainsKey(status.Id)) ? CountByStatus[status.Id] : 0)
                        </span>
                    </h5>
                </button>
            </li>
        }
    }
</ul>

@code {
    [Parameter] public List<WhsOrderOutStatusVm>? Statuses { get; set; }
    [Parameter] public Dictionary<Guid, int>? CountByStatus { get; set; }
    [Parameter] public EventCallback<Guid> OnClick { get; set; }

    private async Task OnClickHandle(Guid statusId)
    {
        SearchParameters.StatusId = statusId;
        await this.OnClick.InvokeAsync(statusId);
    }
}
